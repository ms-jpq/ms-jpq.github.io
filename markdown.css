.codehilite.friendly .bp {
  color: #007020
}

/* Name.Builtin.Pseudo */

.codehilite.friendly .c {
  color: #60a0b0;
  font-style: italic
}

/* Comment */

.codehilite.friendly .c1 {
  color: #60a0b0;
  font-style: italic
}

/* Comment.Single */

.codehilite.friendly .ch {
  color: #60a0b0;
  font-style: italic
}

/* Comment.Hashbang */

.codehilite.friendly .cm {
  color: #60a0b0;
  font-style: italic
}

/* Comment.Multiline */

.codehilite.friendly .cp {
  color: #007020
}

/* Comment.Preproc */

.codehilite.friendly .cpf {
  color: #60a0b0;
  font-style: italic
}

/* Comment.PreprocFile */

.codehilite.friendly .cs {
  color: #60a0b0;
  background-color: #fff0f0
}

/* Comment.Special */

.codehilite.friendly .dl {
  color: #4070a0
}

/* Literal.String.Delimiter */

.codehilite.friendly .err {
  border: 1px solid #FF0000
}

/* Error */

.codehilite.friendly .fm {
  color: #06287e
}

/* Name.Function.Magic */

.codehilite.friendly .gd {
  color: #A00000
}

/* Generic.Deleted */

.codehilite.friendly .ge {
  font-style: italic
}

/* Generic.Emph */

.codehilite.friendly .gh {
  color: #000080;
  font-weight: bold
}

/* Generic.Heading */

.codehilite.friendly .gi {
  color: #00A000
}

/* Generic.Inserted */

.codehilite.friendly .go {
  color: #888888
}

/* Generic.Output */

.codehilite.friendly .gp {
  color: #c65d09;
  font-weight: bold
}

/* Generic.Prompt */

.codehilite.friendly .gr {
  color: #FF0000
}

/* Generic.Error */

.codehilite.friendly .gs {
  font-weight: bold
}

/* Generic.Strong */

.codehilite.friendly .gt {
  color: #0044DD
}

/* Generic.Traceback */

.codehilite.friendly .gu {
  color: #800080;
  font-weight: bold
}

/* Generic.Subheading */

.codehilite.friendly .hll {
  background-color: #ffffcc
}

.codehilite.friendly .il {
  color: #40a070
}

/* Literal.Number.Integer.Long */

.codehilite.friendly .k {
  color: #007020;
  font-weight: bold
}

/* Keyword */

.codehilite.friendly .kc {
  color: #007020;
  font-weight: bold
}

/* Keyword.Constant */

.codehilite.friendly .kd {
  color: #007020;
  font-weight: bold
}

/* Keyword.Declaration */

.codehilite.friendly .kn {
  color: #007020;
  font-weight: bold
}

/* Keyword.Namespace */

.codehilite.friendly .kp {
  color: #007020
}

/* Keyword.Pseudo */

.codehilite.friendly .kr {
  color: #007020;
  font-weight: bold
}

/* Keyword.Reserved */

.codehilite.friendly .kt {
  color: #902000
}

/* Keyword.Type */

.codehilite.friendly .m {
  color: #40a070
}

/* Literal.Number */

.codehilite.friendly .mb {
  color: #40a070
}

/* Literal.Number.Bin */

.codehilite.friendly .mf {
  color: #40a070
}

/* Literal.Number.Float */

.codehilite.friendly .mh {
  color: #40a070
}

/* Literal.Number.Hex */

.codehilite.friendly .mi {
  color: #40a070
}

/* Literal.Number.Integer */

.codehilite.friendly .mo {
  color: #40a070
}

/* Literal.Number.Oct */

.codehilite.friendly .na {
  color: #4070a0
}

/* Name.Attribute */

.codehilite.friendly .nb {
  color: #007020
}

/* Name.Builtin */

.codehilite.friendly .nc {
  color: #0e84b5;
  font-weight: bold
}

/* Name.Class */

.codehilite.friendly .nd {
  color: #555555;
  font-weight: bold
}

/* Name.Decorator */

.codehilite.friendly .ne {
  color: #007020
}

/* Name.Exception */

.codehilite.friendly .nf {
  color: #06287e
}

/* Name.Function */

.codehilite.friendly .ni {
  color: #d55537;
  font-weight: bold
}

/* Name.Entity */

.codehilite.friendly .nl {
  color: #002070;
  font-weight: bold
}

/* Name.Label */

.codehilite.friendly .nn {
  color: #0e84b5;
  font-weight: bold
}

/* Name.Namespace */

.codehilite.friendly .no {
  color: #60add5
}

/* Name.Constant */

.codehilite.friendly .nt {
  color: #062873;
  font-weight: bold
}

/* Name.Tag */

.codehilite.friendly .nv {
  color: #bb60d5
}

/* Name.Variable */

.codehilite.friendly .o {
  color: #666666
}

/* Operator */

.codehilite.friendly .ow {
  color: #007020;
  font-weight: bold
}

/* Operator.Word */

.codehilite.friendly .s {
  color: #4070a0
}

/* Literal.String */

.codehilite.friendly .s1 {
  color: #4070a0
}

/* Literal.String.Single */

.codehilite.friendly .s2 {
  color: #4070a0
}

/* Literal.String.Double */

.codehilite.friendly .sa {
  color: #4070a0
}

/* Literal.String.Affix */

.codehilite.friendly .sb {
  color: #4070a0
}

/* Literal.String.Backtick */

.codehilite.friendly .sc {
  color: #4070a0
}

/* Literal.String.Char */

.codehilite.friendly .sd {
  color: #4070a0;
  font-style: italic
}

/* Literal.String.Doc */

.codehilite.friendly .se {
  color: #4070a0;
  font-weight: bold
}

/* Literal.String.Escape */

.codehilite.friendly .sh {
  color: #4070a0
}

/* Literal.String.Heredoc */

.codehilite.friendly .si {
  color: #70a0d0;
  font-style: italic
}

/* Literal.String.Interpol */

.codehilite.friendly .sr {
  color: #235388
}

/* Literal.String.Regex */

.codehilite.friendly .ss {
  color: #517918
}

/* Literal.String.Symbol */

.codehilite.friendly .sx {
  color: #c65d09
}

/* Literal.String.Other */

.codehilite.friendly .vc {
  color: #bb60d5
}

/* Name.Variable.Class */

.codehilite.friendly .vg {
  color: #bb60d5
}

/* Name.Variable.Global */

.codehilite.friendly .vi {
  color: #bb60d5
}

/* Name.Variable.Instance */

.codehilite.friendly .vm {
  color: #bb60d5
}

/* Name.Variable.Magic */

.codehilite.friendly .w {
  color: #bbbbbb
}

/* Text.Whitespace */

.codehilite.friendly pre {
  line-height: 125%;
}

.codehilite.friendly span.linenos {
  color: #666666;
  background-color: transparent;
  padding-left: 5px;
  padding-right: 5px;
}

.codehilite.friendly span.linenos.special {
  color: #000000;
  background-color: #ffffc0;
  padding-left: 5px;
  padding-right: 5px;
}

.codehilite.friendly td.linenos .normal {
  color: #666666;
  background-color: transparent;
  padding-left: 5px;
  padding-right: 5px;
}

.codehilite.friendly td.linenos .special {
  color: #000000;
  background-color: #ffffc0;
  padding-left: 5px;
  padding-right: 5px;
}

/************
 * MARKDOWN *
 ************/

.markdown {
  color: var(--tw-prose-body);
  max-width: 65ch;
}

.markdown :where([class~="lead"]):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-lead);
  font-size: 1.25em;
  line-height: 1.6;
  margin-top: 1.2em;
  margin-bottom: 1.2em
}

.markdown :where(a):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-links);
  text-decoration: underline;
  font-weight: 500
}

.markdown :where(strong):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-bold);
  font-weight: 600
}

.markdown :where(ol):not(:where([class~="not-prose"] *)) {
  list-style-type: decimal;
  padding-left: 1.625em
}

.markdown :where(ol[type="A"]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-alpha
}

.markdown :where(ol[type="a"]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-alpha
}

.markdown :where(ol[type="A" s]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-alpha
}

.markdown :where(ol[type="a" s]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-alpha
}

.markdown :where(ol[type="I"]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-roman
}

.markdown :where(ol[type="i"]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-roman
}

.markdown :where(ol[type="I" s]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-roman
}

.markdown :where(ol[type="i" s]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-roman
}

.markdown :where(ol[type="1"]):not(:where([class~="not-prose"] *)) {
  list-style-type: decimal
}

.markdown :where(ul):not(:where([class~="not-prose"] *)) {
  list-style-type: disc;
  padding-left: 1.625em
}

.markdown :where(ol > li):not(:where([class~="not-prose"] *))::marker {
  font-weight: 400;
  color: var(--tw-prose-counters)
}

.markdown :where(ul > li):not(:where([class~="not-prose"] *))::marker {
  color: var(--tw-prose-bullets)
}

.markdown :where(hr):not(:where([class~="not-prose"] *)) {
  border-color: var(--tw-prose-hr);
  border-top-width: 1px;
  margin-top: 3em;
  margin-bottom: 3em
}

.markdown :where(blockquote):not(:where([class~="not-prose"] *)) {
  font-weight: 500;
  font-style: italic;
  color: var(--tw-prose-quotes);
  border-left-width: 0.25rem;
  border-left-color: var(--tw-prose-quote-borders);
  quotes: "\201C""\201D""\2018""\2019";
  margin-top: 1.6em;
  margin-bottom: 1.6em;
  padding-left: 1em
}

.markdown :where(blockquote p:first-of-type):not(:where([class~="not-prose"] *))::before {
  content: open-quote
}

.markdown :where(blockquote p:last-of-type):not(:where([class~="not-prose"] *))::after {
  content: close-quote
}

.markdown :where(h1):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 800;
  font-size: 2.25em;
  margin-top: 0;
  margin-bottom: 0.8888889em;
  line-height: 1.1111111
}

.markdown :where(h1 strong):not(:where([class~="not-prose"] *)) {
  font-weight: 900
}

.markdown :where(h2):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 700;
  font-size: 1.5em;
  margin-top: 2em;
  margin-bottom: 1em;
  line-height: 1.3333333
}

.markdown :where(h2 strong):not(:where([class~="not-prose"] *)) {
  font-weight: 800
}

.markdown :where(h3):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  font-size: 1.25em;
  margin-top: 1.6em;
  margin-bottom: 0.6em;
  line-height: 1.6
}

.markdown :where(h3 strong):not(:where([class~="not-prose"] *)) {
  font-weight: 700
}

.markdown :where(h4):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  line-height: 1.5
}

.markdown :where(h4 strong):not(:where([class~="not-prose"] *)) {
  font-weight: 700
}

.markdown :where(figure > *):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0
}

.markdown :where(figcaption):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-captions);
  font-size: 0.875em;
  line-height: 1.4285714;
  margin-top: 0.8571429em
}

.markdown :where(code):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-code);
  font-weight: 600;
  font-size: 0.875em
}

.markdown :where(code):not(:where([class~="not-prose"] *))::before {
  content: "`"
}

.markdown :where(code):not(:where([class~="not-prose"] *))::after {
  content: "`"
}

.markdown :where(a code):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-links)
}

.markdown :where(pre):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-pre-code);
  background-color: var(--tw-prose-pre-bg);
  overflow-x: auto;
  font-weight: 400;
  font-size: 0.875em;
  line-height: 1.7142857;
  margin-top: 1.7142857em;
  margin-bottom: 1.7142857em;
  border-radius: 0.375rem;
  padding-top: 0.8571429em;
  padding-right: 1.1428571em;
  padding-bottom: 0.8571429em;
  padding-left: 1.1428571em
}

.markdown :where(pre code):not(:where([class~="not-prose"] *)) {
  background-color: transparent;
  border-width: 0;
  border-radius: 0;
  padding: 0;
  font-weight: inherit;
  color: inherit;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit
}

.markdown :where(pre code):not(:where([class~="not-prose"] *))::before {
  content: none
}

.markdown :where(pre code):not(:where([class~="not-prose"] *))::after {
  content: none
}

.markdown :where(table):not(:where([class~="not-prose"] *)) {
  width: 100%;
  table-layout: auto;
  text-align: left;
  margin-top: 2em;
  margin-bottom: 2em;
  font-size: 0.875em;
  line-height: 1.7142857
}

.markdown :where(thead):not(:where([class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-th-borders)
}

.markdown :where(thead th):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  vertical-align: bottom;
  padding-right: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em
}

.markdown :where(tbody tr):not(:where([class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-td-borders)
}

.markdown :where(tbody tr:last-child):not(:where([class~="not-prose"] *)) {
  border-bottom-width: 0
}

.markdown :where(tbody td):not(:where([class~="not-prose"] *)) {
  vertical-align: baseline;
  padding-top: 0.5714286em;
  padding-right: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em
}

.markdown {
  --tw-prose-body: #374151;
  --tw-prose-headings: #111827;
  --tw-prose-lead: #4b5563;
  --tw-prose-links: #111827;
  --tw-prose-bold: #111827;
  --tw-prose-counters: #6b7280;
  --tw-prose-bullets: #d1d5db;
  --tw-prose-hr: #e5e7eb;
  --tw-prose-quotes: #111827;
  --tw-prose-quote-borders: #e5e7eb;
  --tw-prose-captions: #6b7280;
  --tw-prose-code: #111827;
  --tw-prose-pre-code: #e5e7eb;
  --tw-prose-pre-bg: #1f2937;
  --tw-prose-th-borders: #d1d5db;
  --tw-prose-td-borders: #e5e7eb;
  --tw-prose-invert-body: #d1d5db;
  --tw-prose-invert-headings: #fff;
  --tw-prose-invert-lead: #9ca3af;
  --tw-prose-invert-links: #fff;
  --tw-prose-invert-bold: #fff;
  --tw-prose-invert-counters: #9ca3af;
  --tw-prose-invert-bullets: #4b5563;
  --tw-prose-invert-hr: #374151;
  --tw-prose-invert-quotes: #f3f4f6;
  --tw-prose-invert-quote-borders: #374151;
  --tw-prose-invert-captions: #9ca3af;
  --tw-prose-invert-code: #fff;
  --tw-prose-invert-pre-code: #d1d5db;
  --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);
  --tw-prose-invert-th-borders: #4b5563;
  --tw-prose-invert-td-borders: #374151;
  font-size: 1rem;
  line-height: 1.75
}

.markdown :where(p):not(:where([class~="not-prose"] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em
}

.markdown :where(img):not(:where([class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em
}

.markdown :where(video):not(:where([class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em
}

.markdown :where(figure):not(:where([class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em
}

.markdown :where(h2 code):not(:where([class~="not-prose"] *)) {
  font-size: 0.875em
}

.markdown :where(h3 code):not(:where([class~="not-prose"] *)) {
  font-size: 0.9em
}

.markdown :where(li):not(:where([class~="not-prose"] *)) {
  margin-top: 0.5em;
  margin-bottom: 0.5em
}

.markdown :where(ol > li):not(:where([class~="not-prose"] *)) {
  padding-left: 0.375em
}

.markdown :where(ul > li):not(:where([class~="not-prose"] *)) {
  padding-left: 0.375em
}

.markdown > :where(ul > li p):not(:where([class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em
}

.markdown > :where(ul > li > *:first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.25em
}

.markdown > :where(ul > li > *:last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.25em
}

.markdown > :where(ol > li > *:first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.25em
}

.markdown > :where(ol > li > *:last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.25em
}

.markdown :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em
}

.markdown :where(hr + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0
}

.markdown :where(h2 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0
}

.markdown :where(h3 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0
}

.markdown :where(h4 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0
}

.markdown :where(thead th:first-child):not(:where([class~="not-prose"] *)) {
  padding-left: 0
}

.markdown :where(thead th:last-child):not(:where([class~="not-prose"] *)) {
  padding-right: 0
}

.markdown :where(tbody td:first-child):not(:where([class~="not-prose"] *)) {
  padding-left: 0
}

.markdown :where(tbody td:last-child):not(:where([class~="not-prose"] *)) {
  padding-right: 0
}

.markdown > :where(:first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0
}

.markdown > :where(:last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0
}

.markdown ul > li {
  line-height: 1.5
}

.markdown ul > li::marker {
  --tw-text-opacity: 1;
  color: rgb(244 114 182 / var(--tw-text-opacity))
}

.markdown ul > li::before {
  display: none
}

.markdown ul > li > * {
  display: inline
}

.markdown pre, .markdown blockquote {
  display: grid;
  width: 100%;
  grid-auto-flow: column;
  grid-column-gap: 0.5rem;
  -moz-column-gap: 0.5rem;
       column-gap: 0.5rem;
  overflow-x: auto;
  border-radius: 0.25rem;
  border-width: 2px;
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  max-width: inherit;
  grid-template-columns: 0.3em 1fr
}

:is(.markdown pre,.markdown blockquote)::before {
  grid-row: span 100;
  content: "";
  --tw-bg-opacity: 1;
  background-color: rgb(244 114 182 / var(--tw-bg-opacity));
}

:is(.markdown pre,.markdown blockquote) > span {
  display: none
}

:is(.markdown pre,.markdown blockquote) > *:not(first-child) {
  grid-template-columns: repeat(2, minmax(0, 1fr))
}

.markdown pre, .markdown code, .markdown blockquote {
  --tw-bg-opacity: 1;
  background-color: rgb(229 229 229 / var(--tw-bg-opacity));
  color: inherit
}
